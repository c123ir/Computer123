// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Form {
  id          String   @id @default(cuid())
  name        String   @db.VarChar(255)
  description String?  @db.Text
  
  // JSON fields for flexibility
  fieldsData   Json     @map("fields_data") // فیلدهای فرم - آرایه FormField[]
  settings     Json     // تنظیمات عمومی فرم - FormSettings
  styling      Json     // تنظیمات ظاهری - FormStyling  
  metadata     Json     // اطلاعات meta - FormMetadata
  
  // Status and versioning
  status      FormStatus @default(DRAFT)
  version     Int        @default(1)
  
  // Categorization
  category    String?    @db.VarChar(100)
  tags        String[]   // برچسب‌ها
  
  // User tracking
  createdBy   String     @map("created_by") @db.VarChar(100)
  updatedBy   String?    @map("updated_by") @db.VarChar(100)
  
  // Timestamps
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  // Relations
  responses   FormResponse[]
  
  // New relations
  menu              Menu?
  fields            FormField[]
  sourceRelations   FormRelation[] @relation("SourceFormRelations")
  targetRelations   FormRelation[] @relation("TargetFormRelations")
  relatedFields     FormField[]    @relation("FormFieldRelation")
  
  // Indexes for performance
  @@index([status])
  @@index([category])
  @@index([createdAt])
  @@index([createdBy])
  @@map("forms")
}

model FormResponse {
  id            String   @id @default(cuid())
  formId        String   @map("form_id")
  
  // Response data
  answers       Json     // پاسخ‌های کاربر - Record<fieldId, value>
  submitterInfo Json?    @map("submitter_info") // اطلاعات ارسال‌کننده
  metadata      Json     // اطلاعات meta پاسخ
  
  // Status and timing
  status        ResponseStatus @default(COMPLETED)
  submittedAt   DateTime @default(now()) @map("submitted_at")
  duration      Int?     // مدت زمان پر کردن (ثانیه)
  
  // IP و User Agent برای tracking
  ipAddress     String?  @map("ip_address") @db.VarChar(45)
  userAgent     String?  @map("user_agent") @db.Text
  
  // Relations
  form Form @relation(fields: [formId], references: [id], onDelete: Cascade)
  
  // Indexes
  @@index([formId])
  @@index([submittedAt])
  @@index([status])
  @@map("form_responses")
}

model FormTemplate {
  id          String   @id @default(cuid())
  name        String   @db.VarChar(255)
  description String   @db.Text
  category    String   @db.VarChar(100)
  
  // Template data (مطابق CreateFormModal)
  formData    Json     @map("form_data") // ساختار کامل فرم template
  preview     String?  @db.Text // URL تصویر پیش‌نمایش
  tags        String[] // برچسب‌ها
  
  // Metadata و popularity
  popularity  Int      @default(0) // امتیاز محبوبیت
  isActive    Boolean  @default(true) @map("is_active")
  isBuiltIn   Boolean  @default(false) @map("is_built_in") // templates پیش‌فرض
  
  // User tracking
  createdBy   String   @map("created_by") @db.VarChar(100)
  
  // Timestamps
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  // Indexes
  @@index([category])
  @@index([popularity])
  @@index([isActive])
  @@map("form_templates")
}

// User management (برای آینده)
model User {
  id        String   @id @default(cuid())
  email     String   @unique @db.VarChar(255)
  name      String   @db.VarChar(255)
  password  String   @db.VarChar(255) // hashed
  role      UserRole @default(USER)
  isActive  Boolean  @default(true) @map("is_active")
  
  // Profile info
  avatar    String?  @db.Text
  phone     String?  @db.VarChar(20)
  
  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  lastLogin DateTime? @map("last_login")
  
  @@index([email])
  @@index([role])
  @@map("users")
}

// Settings table برای تنظیمات سیستم
model SystemSetting {
  id        String   @id @default(cuid())
  key       String   @unique @db.VarChar(100)
  value     Json     // مقدار تنظیم
  type      String   @db.VarChar(50) // نوع تنظیم
  category  String   @db.VarChar(50) // دسته‌بندی
  
  // Description و metadata
  label       String   @db.VarChar(255)
  description String?  @db.Text
  isPublic    Boolean  @default(false) @map("is_public")
  
  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  @@index([category])
  @@map("system_settings")
}

// Enums
enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  PAUSED
}

enum ResponseStatus {
  DRAFT
  COMPLETED
  PARTIAL
}

enum UserRole {
  ADMIN
  MANAGER
  USER
}

model Menu {
  id          String    @id @default(cuid())
  title       String    @db.VarChar(255)
  icon        String?   @db.VarChar(100)
  order       Int       @default(0)
  type        MenuType  @default(STATIC)
  status      Status    @default(ACTIVE)
  
  // Menu configuration
  config      Json      // MenuConfig type from frontend
  
  // Tree structure
  parentId    String?   @map("parent_id")
  parent      Menu?     @relation("MenuTree", fields: [parentId], references: [id])
  children    Menu[]    @relation("MenuTree")
  
  // Form relation (for form-type menus)
  formId      String?   @map("form_id") @unique  // Added @unique for one-to-one relation
  form        Form?     @relation(fields: [formId], references: [id])
  
  // Access control
  permissions String[]  // Array of permission keys
  roles       String[]  // Array of role keys
  
  // Metadata
  createdBy   String    @map("created_by")
  updatedBy   String?   @map("updated_by")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  
  @@index([parentId])
  @@index([formId])
  @@index([type])
  @@index([status])
  @@map("menus")
}

model FormField {
  id          String    @id @default(cuid())
  formId      String    @map("form_id")
  label       String    @db.VarChar(255)
  type        String    @db.VarChar(50)
  required    Boolean   @default(false)
  order       Int       @default(0)
  
  // Field configuration
  config      Json      // Field specific configuration
  validation  Json?     // Validation rules
  permissions String[]  // Field level permissions
  
  // Panel specific fields
  isPanel     Boolean   @default(false) @map("is_panel")
  parentId    String?   @map("parent_id")
  parent      FormField? @relation("PanelFields", fields: [parentId], references: [id])
  children    FormField[] @relation("PanelFields")
  
  // Panel settings
  panelConfig Json?     @map("panel_config") // تنظیمات مخصوص پنل
  
  // Relations
  form        Form      @relation(fields: [formId], references: [id], onDelete: Cascade)
  
  // For relation type fields
  relatedFormId String? @map("related_form_id")
  relatedForm   Form?   @relation("FormFieldRelation", fields: [relatedFormId], references: [id])
  
  @@index([formId])
  @@index([type])
  @@index([parentId])
  @@index([isPanel])
  @@map("form_fields")
}

model FormRelation {
  id            String    @id @default(cuid())
  sourceFormId  String    @map("source_form_id")
  targetFormId  String    @map("target_form_id")
  type          RelationType @default(ONE_TO_MANY)
  
  // Relation configuration
  config        Json      // Relation specific configuration
  
  // Relations
  sourceForm    Form      @relation("SourceFormRelations", fields: [sourceFormId], references: [id])
  targetForm    Form      @relation("TargetFormRelations", fields: [targetFormId], references: [id])
  
  @@unique([sourceFormId, targetFormId])
  @@index([sourceFormId])
  @@index([targetFormId])
  @@map("form_relations")
}

enum MenuType {
  STATIC
  DYNAMIC
  FORM
}

enum Status {
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum RelationType {
  ONE_TO_ONE
  ONE_TO_MANY
  MANY_TO_MANY
}